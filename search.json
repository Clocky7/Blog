[{"title":"python基础变量（字符串、数字）","url":"/post/40fa0d1d/","content":"一.字符串常用方法下面是一些基本的字符串操作函数(简称字串串的常用API)，用于日常工作：\n#把字符串转为小写lower() str = &quot;Clocky&quot;str_proves = str.lower()print(str_proves) #把字符串转为大写upper() str = &quot;Clocky&quot;str_proves = str.upper()print(str_proves) #把字符串首字母转为大写()capitalize()str = &quot;clocky is a good man&quot;str_proves = str.capitalize()print(str_proves) #把字符串每个子字符串首字母转为大写title()str = &quot;clocky&quot;str_proves = str.title()print(str_proves) #移除字符串两端空白strip(),其中在其前加left、right可以只删除一端空白str = &quot;  clocky  &quot;str_proves = str.strip()print(str_proves) #将字符串拆分为列表,split(&quot;其中可选择分隔符，默认空格&quot;)str = &quot;clocky is?a good man&quot;str_proves = str.split(&quot;?&quot;)print(str_proves) #其中[]表示其中截取哪个位置开始的字符串。同时几个分隔符可以一起用str = &quot;clocky is?a good&amp; man&quot;str_proves = str.split(&quot;?&quot;)[1].split(&quot;&amp;&quot;)print(str_proves) #将列表中两个字符串连接为一个字符串join()str = [&quot;Clocky&quot;,&quot;is a good man&quot;]str_proves = &quot; &quot;.join(str)print(str_proves) #将字符串中字符串替换为另一个字符串replace()str = &quot;clocky is a good man&quot;str_proves = str.replace(&quot;clocky&quot;,&quot;Miko&quot;)print(str_proves) #查找字符串，返回第一次出现的位置find()，如果没找到返回-1str = &quot;clocky is a good man&quot;str_proves = str.find(&quot;a&quot;)print(str_proves) #检查字符串是否以某个字符串开头startswith()str = &quot;clocky is a good man&quot;str_proves = str.startswith(&quot;clocky&quot;)print(str_proves) #检查字符串是否以某个字符串结尾endwith()str = &quot;clocky is a good man&quot;str_proves = str.endswith(&quot;man&quot;)print(str_proves) #检查字符串是否只有数字字符isdigit()str = &quot;clocky7&quot;str1 = &quot;7&quot;print(str.isdigit())print(str1.isdigit()) #检查字符串是否只有字母字符isalpha()str = &quot;clocky7&quot;str1 = &quot;c&quot;print(str.isalpha())print(str1.isalpha()) #检查字符串是否只有字母和数字字符isalnum()str = &quot;clocky7&quot;str1 = &quot;c&quot;print(str.isalnum())print(str1.isalnum()) #检查字符串中某个字符串出现次数count()str = &quot;clocky is a good man，whom is a student&quot;str_proves = str.count(&quot;is&quot;)print(str_proves) #老式字符串格式化format()str = &quot;clocky is &#123;&#125; good man，whom &#123;&#125; a student&quot;num = &quot;a&quot;xiyu = &quot;is&quot;str_proves = str.format(num,xiyu)print(str_proves)   \n\n结果：\nclocky\nCLOCKY\nClocky is a good man\nClocky\nclocky\n[&#39;clocky is&#39;, &#39;a good man&#39;]\n[&#39;a good&#39;, &#39; man&#39;]\nClocky is a good man\nMiko is a good man\n10\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\n2\nclocky is a good man，whom is a student\n\n二.数字变量2.1 进制十进制直接表示；二进制0b表示；八进制0o表示；十六进制0x表示。\n#注：其中10为测试数字,根据各种进制转换为十进制数 #十进制num = 10print(num) #八进制num = 0o10print(num) #十六进制num = 0x10print(num) #二进制num = 0b10print(num)\n\n结果：\n108162\n总结：&emsp;&emsp;也就是说是多少进制就是一轮有多少个数，例如10进制09共10个数，八进制07共8个数，一轮所有数走完后就进1.\n2.2 浮点数实际上浮点数有多种不同的表示方法，最复杂的科学计数法是”假设Xe+y,X为原数，e+y则表示10的y次方，原式的结果就是将两者相乘”。下面就是具体的例子：\n#不同的表示方法 num = 10.print(num) num1 = 10.0print(num1) num2 = .9print(num2) #科学计数法num3 = 1.52e-3print(num3)\n\n结果：\n10.0  \n10.0  \n0.9  \n0.00152\n\n2.3 布尔类型· 布尔只有两个值：True、False\n· 而数字中除了0其余皆为True\n· 还有个需要注意的地方，空字符串为False，但空格字符串为True\n· 用bool（）将其转化为布尔值\nprint(bool(1))print(bool(0))\n\n结果：\nTrue  \nFalse\n\n2.4 数字类型转换·bin()是将数字转换为二进制·oct()是将数字转换为八进制·hex()是将数字转换为十六进制·float()是将数字转换为浮点数·complex()是将数字转换为复数·int()是将数字转换为整数\n#二进制 num = 6print(bin(num)) #八进制 num = 6print(oct(num)) #十六进制num = 6print(hex(num)) #浮点数num = 6print(float(num)) #复数num = 6print(complex(num)) #合成复数，将前一个作为实部，后一个作为虚部num = 6num1 = 2print(complex(num, num1)) #十进制整数,只保留整数num = 6.9print(int(num))\n结果：\n0b110  \n0o6  \n0x6  \n6.0  \n(6+0j)  \n(6+2j)  \n6\n\n2.5 四舍六入，五看齐，奇变偶不变（规则）这里的意思是，在这种规则下，小数点后面的数，如果小于5，则舍弃，如果大于5，则进位。  \n如果等于5，那么看整数是奇是偶：\n是奇数则进位；  \n是偶数则舍弃。\n三.字节串字节串通过在字符串前加上 $b$ 来表示，其整个数据类型为bytes。\na = b&quot;hello&quot;print(a)print(type(a))\n\n结果：\nb&#39;hello&#39;  \n&lt;class &#39;bytes&#39;&gt;\n\n四.空值空值为None，其类型为NoneType(注：print（）本体也为空值)。举个简单的例子：\na = Noneprint(a)print(type(a)) b = print()print(b)\n\n结果：\nNone  \n&lt;class &#39;NoneType&#39;&gt;  \nNone\n\n","categories":["培训"],"tags":["python基础"]},{"title":"关于第一次接触博客","url":"/post/6c390488/","content":"\n\n\n&emsp;&emsp;怎么说呢，我身边有很多人很早就踏入了外网、博客的圈子里，有的甚至在初中就有了自己日常更新的习惯。他们都是很厉害的人，而我只是个刚刚观测到冰山一角的萌新。代码、技术、生活，blog就是记录这些事情的存在，但我不是天才。对代码生疏，对技术不熟悉，只怀着一颗希望探索未知的心……\n&emsp;&emsp;自此，一条充满神秘与乐趣的路已经摆在我的身前。生活，新发现，新思路都会在这里的blog中记录，我热爱生活、憧憬未来，我会坚持下去。希望能在未来的某天成为一束光，照进身边每个人的世界————\n学习博客的原因\n&emsp;&emsp;本人是一名资深Arknights玩家，近期偶然得知出现了Arknights的blog主题，在朋友的帮助下从github上学习并搭建了自己的博客。身为计算机学院的学生，却对外网与代码了解甚少，着实是一个槽点。见多了形形色色有个性的博客，也想试试搭建属于自己的东西，也想在写博客的过程中见识到更多有意思的事。\n自己搭建时遇到的问题&emsp;&emsp;当我们所编辑的MD文件中所粘贴的图片有两种类型，一种是本地图片，另一种是在线图片，如果我们需要将我们所编辑的文本上传到博客时，本地图片会出现丢失，只出现本地格式路径。&emsp;&emsp;建议：&emsp;&emsp;外链图片转存失败,源站可能有防盗链机制,建议将图片保存至本地直接上传\n自言自语$ 其实忘了没啥想说的~~~","categories":["日常"],"tags":["有感而发"]},{"title":"python运算符以及表达式基础","url":"/post/fbe2c3eb/","content":"一.运算符1.1 算术运算符基本有的加（+），减（-），乘（*）。除（&#x2F;）会将结果转换为小数，介绍一下其他的方法：\n# 取模运算，就是求余数%a = 10b = 3print(a % b) # 幂运算，就是次方a = 2b = 3print(a ** b) # 整除//a = 10b = 3print(a // b)\n\n1\n8\n3\n\n1.2 比较运算符高级一点的就是 &lt;&#x3D;,&gt;&#x3D;,!&#x3D;,简单一点的,&#x3D;&#x3D;,&lt;,&gt;。\n1.3 逻辑运算符（难）# A and B,需两表达式都为True才为True（若A为False，则B不执行,目的是节约算力）x = 5y = 10re = x &gt; 3 and y &lt; 20print(re) # 难点,A为True时，表达式结果就是B的结果# 前A为False时，表达式结果就是A的结果x = 5y = 10re = x and yprint(re) a = 0b = 5re = a and bprint(re) # A or B,需两表达式都为False才为False（若A为False，则B不执行,目的是节约算力）x = 5y = 10re = x &lt; 3 or y &lt; 20print(re) # 难点,A为False时，表达式结果就是B的结果# 前A为True时，表达式结果就是A的结果a = 0b = 5re = a or bprint(re) A = 5B = 0re1 = A or Bprint(re1) # not 非运算,即判断表达式是否为Falsex = 5re = not xprint(re) re1 = not x &gt; 3print(re1) re2 = not Falseprint(re2)\n\nTrue\n10\n0\nTrue\n5\n5\nFalse\nFalse\nTrue\n\n补充：a&lt; x &lt; y 可以看成是a&lt; x and x &lt; y\n# python中这一条语句是同时执行的，表示100 &lt; 10 and 10 &lt; 30，所以是Falsex = 10re = 100 &lt; x &lt; 30print(re) &#x27;&#x27;&#x27;但其他的编程语言会先执行100 &lt; x 然后判断(100 &lt; x) &lt; 30100 &lt; x 结果为0(False),而 0 &lt; 30 结果为1(True),所以其他编程语言会返回True&#x27;&#x27;&#x27;\n\nFalse\n\n1.4 赋值运算符&emsp;&emsp;最简单的是 &#x3D; ，其后所有算术运算符都可以写成+&#x3D;，*&#x3D;这种形式。&#x3D; 是一种赋值运算符，先执行右边的表达式，再把结果赋值给左边的变量。\n注：a++和a–这类运算在python中是不合法的\n1.5 位运算符主要应用于二进制，若是其他整数则转换为二进制，然后进行计算，默认返回整数值。\n# 按位与&amp;，如果a和b的相应位都是1，则结果位为1，否则为0a = 0b1010b = 0b0101print(a &amp; b) # 按位或|，只要a和b中至少有一位是1，则结果位为1，否则为0a = 0b1010b = 0b0101print(a | b) # 按位异或^，如果a和b的相应位不同，则结果位为1，否则为0a = 0b1010b = 0b0100print(a ^ b)  # 按位取反，其实就是二进制转换为十进制，然后取负号，再减一a = 0b1010print(~a) # 左移&lt;&lt;，将a转换为二进制整体向左移动，右移同理（右边超出的部分丢弃）a = 10print(a &lt;&lt; 2)\n\n0\n15\n14\n-11\n40\n\n一个30年的笔试题\n#如何才能使得print(x.y)为20，10&#x27;x = 10y = 20&#x27;&#x27;&#x27;python里可以用x,y = y, x结构赋值其他语言不行,这里简单的可以使用Temp变量即c = aa = bb = c&#x27;&#x27;&#x27;#讲到这里也可以使用异或x = x ^ yy = x ^ yx = x ^ yprint(x,y) \n\n具体为什么能行呢，可以自己在草稿纸上演算一下两个数的异或，再用异或后的值再与其中一个异或一次，就会得到另一个了。\n1.6 身份运算符is，is not 其要求是不是同一个对象，而 &#x3D;&#x3D; 判断是不是同一个数值。\na = [1, 2, 3]b = [1, 2, 3]print(a == b) #True, 比较的是值print(a is b) #False,比较的是内存地址\n\nTrue\nFalse\n\n1.7 成员运算符就是in 和 not in。\n1.8 三目运算符# 就是if else用在表达式里a = 1b = 2 max = a if a&gt;b else bprint(max)#如果 a&gt;b 成立，就把 a 作为整个表达式的值，并赋给变量 max；#如果 a&gt; b 不成立，就把 b 作为整个表达式的值，并赋给变量 max。\n\n\n更多的时候，我们借助()来明确优先级问题\n\n二.表达式就是一行代码（最小单位），是一个数值都行，多行表达式组成语句，多条语句组成代码块，然后就是程序。\n举几个简单的表达式：\n# 算术表达式a = 5b = 3result = a + b  # 加法result = a / b  # 除法# 赋值表达式a = 5  b = a + 3  # 计算并赋值 # 有一种属于python的海象运算符，同时取值与赋值if (a := 5) &gt; 0:  # 赋值表达式    print(a)# 推导式a = [1, 2, 3, 4]result = [x * 2 for x in a]  # 创建一个新列表，元素是原列表每个元素的两倍","categories":["培训"],"tags":["python基础"]},{"title":"python常见复合类型基础","url":"/post/c3da89ad/","content":"一.列表\n列表中可以填充各种类型的数据，且可以同时存在于一个列表中，包括可以包含几个列表。  \n\n列表中的数据有顺序、有下标。\n\n\n1.1 列表创建#创建空列表a = list()print(a) #创建列表b = list([1,2,3])print(b) #创建字符列表c = list(&#x27;abc&#x27;)print(c)    \n\n[]\n[1, 2, 3]\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n\n总结：只要可以取下标，就可以传入列表。\n1.2 列表运算\n与字符串基本相似，可以根据字符串运算参考。\n\n#列表合并a = [100,200,300]b = [400,500,600]c = a + bprint(c) #列表累乘（累乘必须乘以正整数,2.0这类也不可以）a = [1,2]b = a * 3print(b) #加等,即源式加后面的式子a = [1,2,3]a+=[4,5,6]print(a) #乘等，同理a = [1,2,3]a*=3print(a) #判断是否包含，同理于字符串a = [1,2,3,4,5,6]print(1 in a)\n\n[100, 200, 300, 400, 500, 600]\n[1, 2, 1, 2, 1, 2]\n[1, 2, 3, 4, 5, 6]\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\nTrue\n\n1.3 列表基本访问#下标访问简单列表元素a = [1,2,3,4,5]print(a[0]) #切片访问列表元素（这里切片出来是一个列表，因为其本身就是一个列表）a = [1,2,3,4,5]print(a[1:3]) #多重列表a = [[1,2,3],     [4,5,6],     [7,8,9]] #取了第二个列表，然后取了其第一个元素print(a[1][0]) #取了前两个列表print(a[0:2]) #取了前两个列表，然后取了第一个列表print(a[0:2][0]) #取了前两个列表，然后取了第一个列表，然后取了第一个元素print(a[0:2][0][0])\n\n1\n[2, 3]\n4\n[[1, 2, 3], [4, 5, 6]]\n[1, 2, 3]\n1\n\n1.4 列表添加元素#增x = [1,2,3]x.append(4)print(x) #插入x = [1,2,3]x.insert(1,4)print(x) #增可迭代对象x = [1,2,3]x.extend([4,5,6])print(x)\n\n[1, 2, 3, 4]\n[1, 4, 2, 3]\n[1, 2, 3, 4, 5, 6\n\n扩展：id（）函数的运用其可以查看一个变量保存的数据地址.\n#列表append x = [1,2,3]print(id(x)) x.append(4)print(id(x)) #列表相加 a = [1,2,3]print(id(a)) b = [4,5,6]a = a + b print(id(a))\n\n2278015630464\n2278015630464\n2277993865920\n2278015819136\n\n&emsp;&emsp;\n1.5 修改元素#在列表下标范围内选元素修改 a = [1,2,3,4,5]a[3] = 100print(a) #切片赋值 #超出范围a = [1,2,3,4,5]a[4:100] = [1,2]print(a) a = [1,2,3,4,5]a[1:3] = [100,200]print(a)\n\n[1, 2, 3, 100, 5]\n[1, 2, 3, 4, 1, 2]\n[1, 100, 200, 4, 5]\n\n总结：若只修改一个元素，必须在列表序列范围内。若用切片修改数据，可以超出范围，但必须是可迭代对象且符合条件。\n1.6 删除方法\nremove是直接删除列表内所含元素值，  \npop是删除列表内指定位置的元素，  \nclear是清空列表\n\n#remove方法a = [1,2,3,4,5,6,7,8,9,10]a.remove(1)print(a) #pop方法a = [1,2,3,4,5,6,7,8,9,10]a.pop(0)print(a) #clear方法a = [1,2,3,4,5,6,7,8,9,10]a.clear()print(a) #后期方法dela = [1,2,3,4,5,6,7,8,9,10]del a[0]print(a) #直接删除变量del aprint(a)\n\n[2, 3, 4, 5, 6, 7, 8, 9, 10]\n[2, 3, 4, 5, 6, 7, 8, 9, 10]\n[]\n[2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nNameError: name &#39;a&#39; is not defined\n\n1.7 列表常见API#len（）a = [1,2,3,4,5]print(len(a)) #max（）a = [1,2,3,4,5]print(max(a)) #min（）a = [1,2,3,4,5]print(min(a)) #list（sep）,转元组为列表a = (1,2,3,4,5)print(list(a))\n\n5\n5\n1\n[1, 2, 3, 4, 5]\n\n扩展API\n#index()索引一个元素的第一个下标a = [1,2,3,4,5]print(a.index(3))\n\n2\n\n二.元组2.1 元组基本属性\n元组中的元素一般不可变动，较列表不同。\n\n#空元组x = ()print(x) #元组切片x = (1,2,3,4)print(x[1:7]) #单个数据的元组x = (1,)  print(x)print(type(x)) #注意，元组中只有一个元素时，必须加逗号y = (1)print(type(y)) #不加括号的元组x = 1,2,3,&#x27;hello&#x27;print(x)\n\n()\n(2, 3, 4)\n(1,)\n&lt;class &#39;tuple&#39;&gt;\n&lt;class &#39;int&#39;&gt;\n(1, 2, 3, &#39;hello&#39;)\n\n2.2 创建元组x = tuple()print(x) #也得是可迭代对象a = tuple(range(10))print(a)\n\n()\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n由于元组不可变，所以只能删除整个变量，不能对其中元素操作。\n#元组切片x = (1,2,3,4)print(x[1:7]) #元组解包x = (1,2,3,4)a,b,c,d = xprint(a,b,c,d) #常用于结构赋值a,b = (1,2)print(a,b)\n\n(2, 3, 4)\n1 2 3 4\n1 2\n\n2.4 元组运算元组虽不可变，但其可以进行叠加，原元组不变，可合并为一个新元组。\n#加法a = (1,2)b = (3,4)c = a + bprint(c) #乘法a = (1,2)b = a * 3print(b)\n\n(1, 2, 3, 4)\n(1, 2, 1, 2, 1, 2)\n\n2.5 元组常用API参考列表操作，包括index（）也一样，只有最后的转列表为元组有区别，方法为tuple()。\n#count方法,列表与元组皆有a = (1,2,3)b = [1,1,2]print(a.count(1))print(b.count(1))\n\n1\n2\n\n三.字典3.1 字典简介\n字典是可变容器{}  \n字典的数据是无序的  \n字典由键值对构成，键实际就相当于下标\n\n3.2 字典创建#数字也可以作为键a = &#123;1:2,2:3&#125;print(a)print(type(a)) #也可以嵌套字典a = &#123;1:2,2:&#123;1:2,2:3&#125;&#125;print(a) #变量可以作为键x = &#x27;hello&#x27;y = 1a = &#123;x:1,y:2&#125;print(a) #重复的键会以最后一个键值对为准a = &#123;1:2,1:3&#125;print(a) #dict函数，等号前为键，后为值a = dict(a=1,b=2,c=3)print(a) b = dict([[1,2],[3,4]])print(b) c = dict([[1,2]])print(c)\n\n&#123;1: 2, 2: 3&#125;\n&lt;class &#39;dict&#39;&gt;\n&#123;1: 2, 2: &#123;1: 2, 2: 3&#125;&#125;\n&#123;&#39;hello&#39;: 1, 1: 2&#125;\n&#123;1: 3&#125;\n&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\n&#123;1: 2, 3: 4&#125;\n&#123;1: 2&#125;\n\n注意：使用dict（）时需要括号内的数据成对出现，因为要组成键值对。\n3.3 字典基本操作\nin 与not in用来表示一个键是否在字典中  \n可以向列表、元组一样通过”键”下标来访问字典中的值\n\n3.4 字典常用API# 查看字典长度,即键值对个数a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(len(a)) # str()把字典[字面量]变为字符串,网络传输常把这种字符串（json）传输a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(str(a),type(str(a))) # 清空字典a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;a.clear()print(a) #浅复制a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;b = a.copy()print(b) #访问键值对 get(key,x),x为找不到键时的返回值，默认为Nonea = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(a.get(&#x27;name&#x27;))print(a.get(&#x27;address&#x27;,&#x27;not found&#x27;)) # 以列表返回一个视图(可迭代)对象，即一个一个打包的键值对 items()a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(a.items(),type(a.items())) # 返回一个键的迭代器 keys()a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(a.keys(),type(a.keys())) # 返回一个值的迭代器 values()a = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(a.values(),type(a.values())) # 更新整个字典 update()，类似append和extenda = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;b = &#123;&#x27;address&#x27;:&#x27;beijing&#x27;,&#x27;phone&#x27;:&#x27;123456789&#x27;&#125;a.update(b)print(a) # 删除字典中的键值对 pop(key,x),x为找不到键时的返回值，默认为Nonea = &#123;&#x27;name&#x27;:&#x27;zhangsan&#x27;,&#x27;age&#x27;:18,&#x27;sex&#x27;:&#x27;male&#x27;&#125;print(a.pop(&#x27;name&#x27;))print(a.pop(&#x27;address&#x27;,&#x27;not found&#x27;))\n\n3\n&#123;&#39;name&#39;: &#39;zhangsan&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;male&#39;&#125; &lt;class &#39;str&#39;&gt;\n&#123;&#125;\n&#123;&#39;name&#39;: &#39;zhangsan&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;male&#39;&#125;\nzhangsan\nnot found\ndict_items([(&#39;name&#39;, &#39;zhangsan&#39;), (&#39;age&#39;, 18), (&#39;sex&#39;, &#39;male&#39;)]) &lt;class &#39;dict_items&#39;&gt;\ndict_keys([&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;]) &lt;class &#39;dict_keys&#39;&gt;\ndict_values([&#39;zhangsan&#39;, 18, &#39;male&#39;]) &lt;class &#39;dict_values&#39;&gt;\n&#123;&#39;name&#39;: &#39;zhangsan&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;male&#39;, &#39;address&#39;: &#39;beijing&#39;, &#39;phone&#39;: &#39;123456789&#39;&#125;\nzhangsan\nnot found\n\n四.集合4.1 集合基本介绍集合分set和固定集合frozenset\nset的元素值必须是不可变的，不能存储 list、dict 等可变类型。\n\n集合是可变的容器，固定集合是不可变的集合  \n集合内的数据绝对不同\n\n4.2 集合创建#set()创建a = set([1,2,3,4,5])print(a,type(a)) #空集合 注意：空集合创建必须用set()，不能用&#123;&#125;a = set()b = &#123;&#125;print(a,type(a))print(b,type(b)) #与列表的联合应用,set()是允许里面是列表的a = [1,2,3,4,5,6,1,2,2,3]b = set(a)print(b)\n\n&#123;1, 2, 3, 4, 5&#125; &lt;class &#39;set&#39;&gt;\nset() &lt;class &#39;set&#39;&gt;\n&#123;&#125; &lt;class &#39;dict&#39;&gt;\n&#123;1, 2, 3, 4, 5, 6&#125;\n\n来三个容易绕住你的问题 &gt;V&lt;\n# a里有几个数据a = &#123;(10,20,30),(20,10,30)&#125;print(a) # a中数据是什么a = &#123;(10),(10)&#125;print(a) # a中数据该怎么写a = &#123;(10,),(10,)&#125;print(a)\n&#123;(20, 10, 30), (10, 20, 30)&#125;\n&#123;10&#125;\n&#123;(10,)&#125;\n\n总结：一定要把基础学牢，前面的东西要学会\n4.3 集合操作#添加元素a = &#123;1,2,3&#125;a.add(4)print(a) #update()添加多个元素,实际为添加容器,不管是列表还是元组都会被取出数据传入a = &#123;1,2,3&#125;a.update([4,5,6],(7,8,9))print(a) #remove()删除元素，如果元素不存在，会报错a = &#123;1,2,3&#125;a.remove(1)print(a)     #discard()删除元素，如果元素不存在，不会报错a = &#123;1,2,3&#125;a.discard(4)print(a) &#x27;&#x27;&#x27;pop()对集合某种排序（有但不清楚，所以其实是固定排序），删除第一个元素并显示，如果集合为空，会报错方便记的,pop()就是随机删除一个元素并显示&#x27;&#x27;&#x27;a = &#123;1,2,3&#125;b = a.pop()print(a)print(b)\n\n&#123;1, 2, 3, 4&#125;\n&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;\n&#123;2, 3&#125;\n&#123;1, 2, 3&#125;\n&#123;2, 3&#125;\n1\n\n注:尽管集合无序，但可以用for循环来遍历集合\n4.4 判断集合是否含某元素a = &#123;1,2,3&#125;print(2 in a) b = &#123;1,2,3,4,5&#125;print(3 not in b)\n\nTrue\nFalse\n\n4.5 集合常用API# 添加元素 a = &#123;1,2,3&#125;a.add(4)print(a) # 清空集合 a = &#123;1,2,3&#125;a.clear()print(a) # 拷贝 a = &#123;1,2,3&#125;b = a.copy()print(b) # 返回差集 a = &#123;1,2,3&#125;b = &#123;2,3,4&#125; print(a.difference(b))print(a)  # 返回差集并删除该集合其他元素 a = &#123;1,2,3&#125;b = &#123;2,3,4&#125;a.difference_update(b)print(a)print(b)  # 返回交集 a = &#123;1,2,3&#125;b = &#123;2,3,4&#125;print(a.intersection(b)) # 返回交集并删除该集合其他元素a = &#123;1,2,3&#125;b = &#123;2,3,4&#125;a.intersection_update(b)print(a)print(b) # 判断两个集合是否完全不同 a = &#123;1,2,3&#125;b = &#123;2,3,4&#125;print(a.isdisjoint(b)) # 判断前集合是否为后集合子集 a = &#123;1,2,3&#125;b = &#123;2,3&#125;print(a.issubset(b)) # 判断后集合是否为前集合子集 a = &#123;1,2,3&#125;b = &#123;2,3&#125;print(a.issuperset(b)) # 返回俩集合不重复的元素，I为并集，即 U-Ia = &#123;1,2,3&#125;b = &#123;2,3,4&#125;print(a.symmetric_difference(b))print(a) # 返回俩集合不重复的元素，删除其他元素a = &#123;1,2,3&#125;b = &#123;2,3,4&#125;a.symmetric_difference_update(b)print(a) # 返回俩集合的并集a = &#123;1,2,3&#125;b = &#123;2,3,4&#125;print(a.union(b)) # 看集合长度a = &#123;1,2,3&#125;print(len(a))\n\n&#123;1, 2, 3, 4&#125;\nset()\n&#123;1, 2, 3&#125;\n&#123;1&#125;\n&#123;1, 2, 3&#125;\n&#123;1&#125;\n&#123;2, 3, 4&#125;\n&#123;2, 3&#125;\n&#123;2, 3&#125;\n&#123;2, 3, 4&#125;\nFalse\nFalse\nTrue\n&#123;1, 4&#125;\n&#123;1, 2, 3&#125;\n&#123;1, 4&#125;\n&#123;1, 2, 3, 4&#125;\n3\n\n","categories":["培训"],"tags":["python基础"]},{"title":"可变与不可变数据","url":"/post/4e2ae685/","content":"一.两者区别\n可变类型修改内容时，不会改变地址；\n\n不可变类型改值时，Python会创建一个新的对象，地址改变。\n\n\n# 可变类型a = [1,2,3]print(id(a))a.append(4)print(id(a)) #不可变类型a = 1print(id(a))a = a + 1print(id(a))\n\n2711527596416\n2711527596416\n140732630124984\n140732630125016\n\n二.判断数据类型#判断是否属于指定类型a = 1print(isinstance(a, dict))  #判断是否属于多个类型之一str1 = &#x27;abc&#x27;print(isinstance(str1, (int, str))) \n\nFalse\nTrue\n\n注：还有一个特别的判断\n# 判断空值a = Noneprint(isinstance(a, NoneType)) a = Noneprint(isinstance(a, None))\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[97], line 3\n    1 # 判断空值\n    2 a = None\n----&gt; 3 print(isinstance(a, NoneType))\n    5 a = None\n    6 print(isinstance(a, None))\n\nNameError: name &#39;NoneType&#39; is not defined\n\n这里写一起因为两个测试之后其实是都不行的，需要注意。\n三.类型转换API# 将数字转化为对应字符a = 97b = chr(a)print(b) # 将字符转化为数字a = &#x27;A&#x27;b = ord(a)print(b) # 用Python表达式运行并返回结果a = eval(&#x27;2+3*4&#x27;)print(a) # 这里常常和.join()结合使用a = [&quot;1&quot;,&quot;2&quot;]b = &quot;+&quot;.join(a)print(b)print(eval(b))\n\na\n65\n14\n1+2\n3\n\n各种数据类型的转换就不赘述了，去找每个数据的创键过程复习。还有就是，像字符串转整数是会报错的，需要注意。\n","categories":["培训"],"tags":["python基础"]},{"title":"大学开始的第一次培训课程","url":"/post/148b0ced/","content":"环境的配置conda的安装&emsp;&emsp;敲代码的都知道学计算机都要会装环境，往前从来都是班级的大佬带着安装，这次尝试着自己安装。\n&emsp;&emsp;Anaconda直接在其官方链接Anaconda上下载即可，安装完成后如下图：\n\n配置环境变量&emsp;&emsp;Anaconda安装完成后，先找到其安装路径，如下图流程：\n\n\n&emsp;&emsp;随后往上滑找到condabin文件夹，进行下面的操作：\n  \n&emsp;&emsp;随后进入电脑的高级系统设置(在桌面右击”我的电脑”并点击”属性”即可)&emsp;&emsp;在”高级系统设置”中点击”环境变量”，在”系统变量”中找到Path，点击新建，随后将找到的condabin文件夹路径粘贴进去，如下图：\n\n简单的conda命令使用&emsp;&emsp;一.首先进行conda的激活，在电脑任意文件夹路径栏里键入cmd进入终端界面，输入conda activate，如果出现如下图所示，则表示conda已经激活成功。\n\n&emsp;&emsp;二.键入conda help可以查看conda的基本命令，此处采用 “conda create -n 你命的环境名 python&#x3D;&#x3D;你要下的版本” 创建一个虚拟环境。\n\n&emsp;&emsp;三.输入conda env list查看已创建环境的位置。\n使用代码编辑器配置环境（vscode为例）\npython基础关于注释&emsp;&emsp;在python中，使用#表示单行注释，使用’’’表示多行注释。因为很多时候注释较长，使用’’’可以换行来写，方便编写时审阅。\n&#x27;&#x27;&#x27;nnnnihao666&#x27;&#x27;&#x27;\n\n关于输入输出&emsp;&emsp;在python中，使用print()函数来输出内容，使用input()函数来输入内容。其中输出有两个重要的内容，一个是sep，一个是end.\n&emsp;&emsp;·sep 参数用来定义数据之间的分割符，默认为空格\n&emsp;&emsp;·end 参数用来定义数据输出完后用什么字符结束，默认是换行符(‘\\n’)\n&emsp;&emsp;下面是关于两个参数的测试代码：\n# 这是输出方面的测试代码print(123, 132, 213,sep=&#x27; &#x27;, end=&#x27;\\n&#x27;)print(&quot;hello world!&quot;)print(&quot;我们班有多少人&quot;, 12)print(1, 2, 3, 4)print(1, 2, 3, 4, sep=&quot; &quot;, end=&quot;\\n&quot;)print(1, 2, 3, 4, sep=&quot;-&quot;, end=&quot;hello&quot;)print(345)# 这是输入方面的测试代码x = input(&quot;请输入任意一个数据&quot;)print(x)\n&emsp;&emsp;结果一测便知，实践永远是验证的最好方式。\n基础变量变量命名&emsp;&emsp;1.变量默认只能由包含数字、字母、下划线的字段命名&emsp;&emsp;（unicode可编码的字符都可命名，包括中文汉字）&emsp;&emsp;2.数字不能作为变量名的开头&emsp;&emsp;3.变量名不能是python官方设置的保留字（如and、or、if、while等）&emsp;&emsp;4.大写字母通常表示常量，即基本不变的数据\n赋值与取值1.两个变量不能进行同时赋值与取值\n  \n&emsp;&emsp;将其分别赋值则可以完成，原因是其中逗号不为逗号运算符，逗号运算符讲究先后顺序\n2.在这里有一个我认为比较难懂的地方，就是\n· a,b,c&#x3D;x1,x2,x3\n&emsp;&emsp;这个大过程是合适的，且同时进行。我的理解是若默认x1，x2，x3都有其值，等号右侧的式子会先进行x1，x2，x3的取值（同时），然后等号两侧均转换为元组，再按顺序由{角标02及x1x3}赋值给a，b，c。因此整个大过程是同时的。  \nx1 = 10x2 = 20x3 = 30b = 40a,b,c = x1,x2,bprint(a,b,c)\n\n&emsp;&emsp;最后的结果是 10 20 40，上面的代码则证明这一点，x1，x2，b会先进行同时取值，然后再依次赋值给a，b，c，所以最后b的值是20，c的值是40而非同时b的值20。\n字符串(1)空格和“空”也能是字符串  \n(2)r’c:\\Software\\code\\py\\hqyj\\n\\t\\3.8_2.ipynb’（开头的r表示里面所有的\\n,\\t之类的全是文字，不转义）  \n(3)”\\\\“ 表示反斜杠\n&emsp;&emsp;示例：\nprint(&quot;nihao\\t wode&quot;)print(&quot;nihao\\\\t wode&quot;)\n\n&emsp;&emsp;输出结果是：\nnihao    wode\nnihao\\t wode\n\n字符串合并&emsp;&emsp;两个字符串可以通过加号相连，同时如果两个字符串紧靠在一起也会自动合并，最后结果都是小米13。\n# 加号合并a = &#x27;小米&#x27;b = &#x27;13&#x27;print(a + b)# 紧靠合并c = &#x27;小米&#x27;&#x27;13&#x27;print(c)\n\n&emsp;&emsp;一个字符串可以用*乘数字来进行累乘，效果就是叠加三次的”小米”。\n# 乘号叠加a = &quot;小米&quot;d = a * 3print(d)\n\n切片&emsp;&emsp;可以通过下标找到一个字符串中固定位置的字符，也可以通过范围切片寻找一段字符串。\n# 切片或下标,其中为左闭右开e = &#x27;小米13pro&#x27;print(e[0])print(e[-2])print(e[-7:3])print(e[3:])# 切片加步长f = &#x27;明日方舟终末地&#x27; print(f[::2])   print(f[5:3:-1])\n\n&emsp;&emsp;结果是：\n小\nr\n小米1\n3pro\n明方终地\n末终\n\n注：这里还有一道经典笔试题\n# 经常笔试题g = input(&#x27;请输入一个字符串：&#x27;) print(g)print(g == g[::-1])\n\n&emsp;&emsp;这段代码可以判断输入的字符串是否是回文，依次类推可以实现其他更多类似回文的问题。\n判断子串&emsp;&emsp;用 a in b 即可知道a是否为b的字串，且返回布尔类型的值。\n字符串长度&emsp;&emsp;用 len()函数来获取。\n字符串格式化&emsp;&emsp;占位符可以有效格式化字符串，缺点是比较麻烦，下面是示例：\n# 占位符a = &#x27;我叫%s,今年%d岁&#x27;%(&#x27;clocky&#x27;,20)print(a)b = &#x27;一共%f元&#x27;%(100)# 保留两位小数c = &#x27;一共%.2f元&#x27;%(100)# 左对齐，占8位字符，保留3位小数d = &#x27;一共%8.3f元&#x27;%(100)print(b)print(c)print(d)# 科学计数法(1e+08就是1*10^8)e = &#x27;一共%g元&#x27;%(100000000)print(e)    \n\n&emsp;&emsp;结果是：\n我叫clocky,今年20岁\n一共100.000000元\n一共100.00元\n一共 100.000元\n一共1e+08元\n\n&emsp;&emsp;更好用的是f-string格式化，它以f开头，其中的表达式则用{}包起来，而且{}中可以用：进一步格式化，如{s:2f}就是把s的值保留两位小数。下面给个简单的例子：\n# 格式化字符串,f-stringa = 34b = 23c = 12print(f&quot;abc(&#123;a&#125;, &#123;b&#125;, &#123;c&#125;)&quot;)\n\n&emsp;&emsp;结果:\nabc(34, 23, 12)\n\n","categories":["培训"],"tags":["python基础"]},{"title":"如今到大三的一些感悟","url":"/post/1d35813b/","content":"\n&emsp;&emsp;从高中三年走到大学三年，不知不觉已经过去这么长一段时间了。感觉时间过的很快，从小学开始，下一个学习阶段都会变得更快，到了大学三年的时间只有小学一年的样子，很难想象小学的时候会过的那么充实。本人学习阶段横跨三省，因为父母工作的原因，小时候周转与河南、四川和浙江。浙江小学六年是记忆最深刻的日子，那时成绩不错，也是最快乐的时候。&emsp;&emsp;我还记得当年最流行的游戏，枪神纪、生死狙击、qq飞车，甚至玩到今天的Minecraft也是在那时候启蒙的。大城市的孩子，没有乡下孩子玩的那么纯真那么有意思，但小伙伴们都喜欢带我去废弃工地的池塘里夹螃蟹、捉蝌蚪，穿溜冰鞋，滑滑板，骑自行车，也一起约着绕城。我们那几个熟的都喜欢跑到别人家玩，家长们也都很开心。\n\n&emsp;&emsp;但人总会随着时间长大。\n&emsp;&emsp;从六年级下册来到四川后，这里改变了我很多。时间很紧，生活很急，老师盯着你，如果处理不当，学习也会压迫你。尽管最后修得成果，但已经没有从前的自由和天真。高中曾经谈过一场不合时宜的早恋，最后以不和而终。这一场梦给我的家庭带来了极大的影响，我的妈妈常常心疼我，我爸总说我已经做到了这个年纪不该承担的责任。总而言之，你不该看起来比父母更沧桑，爸妈永远站在你身后。\n\n&emsp;&emsp;关于我的父母，我很骄傲的告诉各位，他们是全天下最好的父母。\n&emsp;&emsp;他们自我出生起就没有对我动过粗，他们尽自己的努力用我能接受的方式来教育我。没有生活里的说教，不像社会上的很多父母，眼里似乎只有你的学习，和学校一起压垮一个孩子，口口声声都是为你好。我的父母一直让我们兄弟俩去做自己喜欢的事，无论是什么，只要想做，那就去做吧，享受一切。爸说，他们不能永远在你身边，人总会找到属于自己的人生，将来或许会走得很远，但”爸妈永远是你的后盾，你永远是爸妈的孩子，无论遇到什么事，我和你老妈都会努力，哈哈哈。”我从未感受到束缚，去做了很多我想做的事，也从不后悔。哪怕是当时那场早恋，留下过那么多遗憾，给我的家人带来那么多影响，他们只希望我能做自己，而我从中学会了很多为人处世的道理，也看清了很多事。\n&emsp;&emsp;得益于我所经历的一切，笔者认为每个人的人生都各有精彩。迄今为止发生的事，每一件都有其意义，它组成了现在的你，也会是你的未来。不是每个人都应该去做领导、做天才，大家都有自己喜欢的事，只要到最后你都尽力过，坦然接受自己，那么人生的这道坎也就过了。无论走向哪里，都无关紧要，世界很大，就是因为存在形形色色的人才会有绚烂的文明。  \n&emsp;&emsp;最后也希望我能完成自己的梦想：成为一束自由的光，能够在不经意间走进你的世界，为你的世界带来更多温暖与快乐。\n","categories":["日常"],"tags":["有感而发"]}]